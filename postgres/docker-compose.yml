version: '3.8'
services:

    postgres:
        image: postgres
        hostname: postgres
        container_name: postgres
        restart: always
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: example
        command:
            - "postgres"
            - "-c"
            - "wal_level=logical"
        volumes:
            - $PWD/payload.sql:/docker-entrypoint-initdb.d/z99_dump.sql

    adminer:
        image: adminer
        hostname: adminer
        container_name: adminer
        restart: always
        ports:
            - 8080:8080

    zookeeper:
        image: ${REPOSITORY}/cp-zookeeper:${TAG}
        hostname: zookeeper
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: ${REPOSITORY}/cp-enterprise-kafka:${TAG}
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:  
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            KAFKA_LISTENERS: PLAINTEXT://kafka:19091, EXTERNAL://kafka:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19091, EXTERNAL://localhost:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    schema-registry:
        image: ${REPOSITORY}/cp-schema-registry:${TAG}
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
          - kafka

        ports:
         - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:19091
            SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

    connect:
        image: ${REPOSITORY}/cp-server-connect:${TAG}
        container_name: connect
        ports:
            - "8083:8083"
        depends_on:
            - zookeeper
            - kafka
            - schema-registry
        volumes:
            - $PWD/debezium-debezium-connector-postgresql:/usr/share/confluent-hub-components/debezium-debezium-connector-postgresql
        environment:
            CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components/debezium-debezium-connector-postgresql
            CONNECT_BOOTSTRAP_SERVERS: "kafka:19091"
            CONNECT_REST_PORT: 8083
            CONNECT_LISTENERS: "http://0.0.0.0:8083"
            CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
            CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
            CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
            CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
            CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
            CONNECT_GROUP_ID: "connect"
            CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
            CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
            CONNECT_REPLICATION_FACTOR: 1
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
 
